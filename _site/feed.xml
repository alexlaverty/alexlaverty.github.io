<?xml version="1.0" encoding="utf-8"?><feed xmlns="http://www.w3.org/2005/Atom" xml:lang="en"><generator uri="https://jekyllrb.com/" version="4.4.1">Jekyll</generator><link href="http://localhost:4000/feed.xml" rel="self" type="application/atom+xml" /><link href="http://localhost:4000/" rel="alternate" type="text/html" hreflang="en" /><updated>2025-02-02T15:17:48+11:00</updated><id>http://localhost:4000/feed.xml</id><title type="html">Alex Laverty</title><subtitle>Join Me in Overthinking Absolutely Everything
</subtitle><author><name>Alex Laverty</name><email>your-email@domain.com</email></author><entry><title type="html">Quick Body Weight Workout</title><link href="http://localhost:4000/fitcypher/quick-bodyweight-workout/" rel="alternate" type="text/html" title="Quick Body Weight Workout" /><published>2025-02-02T13:34:00+11:00</published><updated>2025-02-02T13:34:00+11:00</updated><id>http://localhost:4000/fitcypher/quick-bodyweight-workout</id><content type="html" xml:base="http://localhost:4000/fitcypher/quick-bodyweight-workout/"><![CDATA[<p>Now we’ve added a page to show a list of available Workouts to choose from :</p>

<p><img src="/assets/images/fitcypher/20250202/screenshot001.png" alt="alt text" /></p>

<p>Each time the user performs an exercise they can click the exercise and it will add an entry for today for that exercise and display a total count of exercises performed per day for that exercise :</p>

<p><img src="/assets/images/fitcypher/20250202/screenshot002.png" alt="alt text" /></p>

<p>I found that with this approach of creating an entry per exercise rep performed the entries page quickly became cluttered with individual reps, so I’ve updated the Entries page to group the exercises by name and provide a count of total exercises :</p>

<p><img src="/assets/images/fitcypher/20250202/screenshot003.png" alt="alt text" /></p>]]></content><author><name>Alex Laverty</name><email>your-email@domain.com</email></author><category term="fitcypher" /><summary type="html"><![CDATA[Now we’ve added a page to show a list of available Workouts to choose from :]]></summary><media:thumbnail xmlns:media="http://search.yahoo.com/mrss/" url="http://localhost:4000/assets/images/fitcypher/20250202/body_weight_workout.jpg" /><media:content medium="image" url="http://localhost:4000/assets/images/fitcypher/20250202/body_weight_workout.jpg" xmlns:media="http://search.yahoo.com/mrss/" /></entry><entry><title type="html">Django Model</title><link href="http://localhost:4000/fitcypher/django-model/" rel="alternate" type="text/html" title="Django Model" /><published>2025-02-02T12:34:00+11:00</published><updated>2025-02-02T12:34:00+11:00</updated><id>http://localhost:4000/fitcypher/django-model</id><content type="html" xml:base="http://localhost:4000/fitcypher/django-model/"><![CDATA[<p>Today I am working on the FitCypher database backend, to keep it simple the nutrition and health metrics will be posted into a common Entry model :</p>

<div class="language-python highlighter-rouge"><div class="highlight"><pre class="highlight"><code><span class="k">class</span> <span class="nc">Entry</span><span class="p">(</span><span class="n">models</span><span class="p">.</span><span class="n">Model</span><span class="p">):</span>
    <span class="n">user</span> <span class="o">=</span> <span class="n">models</span><span class="p">.</span><span class="nc">ForeignKey</span><span class="p">(</span><span class="n">User</span><span class="p">,</span> <span class="n">on_delete</span><span class="o">=</span><span class="n">models</span><span class="p">.</span><span class="n">CASCADE</span><span class="p">,</span> <span class="n">related_name</span><span class="o">=</span><span class="sh">"</span><span class="s">entries</span><span class="sh">"</span><span class="p">)</span>
    <span class="n">date</span> <span class="o">=</span> <span class="n">models</span><span class="p">.</span><span class="nc">DateTimeField</span><span class="p">()</span>
    <span class="n">tracking</span> <span class="o">=</span> <span class="n">models</span><span class="p">.</span><span class="nc">CharField</span><span class="p">(</span><span class="n">max_length</span><span class="o">=</span><span class="mi">255</span><span class="p">)</span>
    <span class="n">string_value</span> <span class="o">=</span> <span class="n">models</span><span class="p">.</span><span class="nc">CharField</span><span class="p">(</span><span class="n">max_length</span><span class="o">=</span><span class="mi">255</span><span class="p">,</span> <span class="n">null</span><span class="o">=</span><span class="bp">True</span><span class="p">,</span> <span class="n">blank</span><span class="o">=</span><span class="bp">True</span><span class="p">)</span>
    <span class="n">numerical_value</span> <span class="o">=</span> <span class="n">models</span><span class="p">.</span><span class="nc">DecimalField</span><span class="p">(</span><span class="n">max_digits</span><span class="o">=</span><span class="mi">10</span><span class="p">,</span> <span class="n">decimal_places</span><span class="o">=</span><span class="mi">2</span><span class="p">,</span> <span class="n">null</span><span class="o">=</span><span class="bp">True</span><span class="p">,</span> <span class="n">blank</span><span class="o">=</span><span class="bp">True</span><span class="p">)</span>
    <span class="n">notes</span> <span class="o">=</span> <span class="n">models</span><span class="p">.</span><span class="nc">TextField</span><span class="p">(</span><span class="n">null</span><span class="o">=</span><span class="bp">True</span><span class="p">,</span> <span class="n">blank</span><span class="o">=</span><span class="bp">True</span><span class="p">)</span>
    <span class="n">tags</span> <span class="o">=</span> <span class="n">models</span><span class="p">.</span><span class="nc">CharField</span><span class="p">(</span><span class="n">max_length</span><span class="o">=</span><span class="mi">255</span><span class="p">,</span> <span class="n">null</span><span class="o">=</span><span class="bp">True</span><span class="p">,</span> <span class="n">blank</span><span class="o">=</span><span class="bp">True</span><span class="p">)</span>
    <span class="n">source</span> <span class="o">=</span> <span class="n">models</span><span class="p">.</span><span class="nc">TextField</span><span class="p">(</span><span class="n">null</span><span class="o">=</span><span class="bp">True</span><span class="p">,</span> <span class="n">blank</span><span class="o">=</span><span class="bp">True</span><span class="p">,</span> <span class="n">default</span><span class="o">=</span><span class="sh">"</span><span class="s">fitcypher</span><span class="sh">"</span><span class="p">)</span>

    <span class="k">def</span> <span class="nf">__str__</span><span class="p">(</span><span class="n">self</span><span class="p">):</span>
        <span class="k">return</span> <span class="sa">f</span><span class="sh">"</span><span class="si">{</span><span class="n">self</span><span class="p">.</span><span class="n">date</span><span class="p">.</span><span class="nf">strftime</span><span class="p">(</span><span class="sh">'</span><span class="s">%Y-%m-%d</span><span class="sh">'</span><span class="p">)</span><span class="si">}</span><span class="s">, </span><span class="si">{</span><span class="n">self</span><span class="p">.</span><span class="n">user</span><span class="si">}</span><span class="s">, </span><span class="si">{</span><span class="n">self</span><span class="p">.</span><span class="n">string_value</span><span class="si">}</span><span class="sh">"</span>
</code></pre></div></div>

<p>This <code class="language-plaintext highlighter-rouge">Entry</code> model is a flexible and generic way to store various health and fitness metrics for users.</p>

<p>Below is an explanation of each field and its purpose:</p>

<hr />

<h3 id="1-user">1. <strong><code class="language-plaintext highlighter-rouge">user</code></strong></h3>
<div class="language-python highlighter-rouge"><div class="highlight"><pre class="highlight"><code>   <span class="n">user</span> <span class="o">=</span> <span class="n">models</span><span class="p">.</span><span class="nc">ForeignKey</span><span class="p">(</span><span class="n">User</span><span class="p">,</span> <span class="n">on_delete</span><span class="o">=</span><span class="n">models</span><span class="p">.</span><span class="n">CASCADE</span><span class="p">,</span> <span class="n">related_name</span><span class="o">=</span><span class="sh">"</span><span class="s">entries</span><span class="sh">"</span><span class="p">)</span>
</code></pre></div></div>
<ul>
  <li><strong>Purpose</strong>: This field establishes a relationship between the <code class="language-plaintext highlighter-rouge">Entry</code> and the <code class="language-plaintext highlighter-rouge">User</code> model. It indicates which user the entry belongs to.</li>
  <li><strong>Details</strong>:
    <ul>
      <li><code class="language-plaintext highlighter-rouge">on_delete=models.CASCADE</code>: If the user is deleted, all their associated entries will also be deleted.</li>
      <li><code class="language-plaintext highlighter-rouge">related_name="entries"</code>: This allows you to access all entries for a specific user using <code class="language-plaintext highlighter-rouge">user.entries</code>.</li>
    </ul>
  </li>
</ul>

<hr />

<h3 id="2-date">2. <strong><code class="language-plaintext highlighter-rouge">date</code></strong></h3>
<div class="language-python highlighter-rouge"><div class="highlight"><pre class="highlight"><code>   <span class="n">date</span> <span class="o">=</span> <span class="n">models</span><span class="p">.</span><span class="nc">DateTimeField</span><span class="p">()</span>
</code></pre></div></div>
<ul>
  <li><strong>Purpose</strong>: This field stores the date and time when the entry was recorded.</li>
  <li><strong>Details</strong>:
    <ul>
      <li>It is essential for tracking when a specific health metric was logged (e.g., weight on a particular day, steps taken on a specific date).</li>
    </ul>
  </li>
</ul>

<hr />

<h3 id="3-tracking">3. <strong><code class="language-plaintext highlighter-rouge">tracking</code></strong></h3>
<div class="language-python highlighter-rouge"><div class="highlight"><pre class="highlight"><code>   <span class="n">tracking</span> <span class="o">=</span> <span class="n">models</span><span class="p">.</span><span class="nc">CharField</span><span class="p">(</span><span class="n">max_length</span><span class="o">=</span><span class="mi">255</span><span class="p">)</span>
</code></pre></div></div>
<ul>
  <li><strong>Purpose</strong>: This field specifies what type of health or fitness metric is being tracked (e.g., “weight”, “steps”, “calories”, “heart_rate”).</li>
  <li><strong>Details</strong>:
    <ul>
      <li>It acts as a label or category for the entry, allowing you to differentiate between different types of metrics.</li>
    </ul>
  </li>
</ul>

<hr />

<h3 id="4-string_value">4. <strong><code class="language-plaintext highlighter-rouge">string_value</code></strong></h3>
<div class="language-python highlighter-rouge"><div class="highlight"><pre class="highlight"><code>   <span class="n">string_value</span> <span class="o">=</span> <span class="n">models</span><span class="p">.</span><span class="nc">CharField</span><span class="p">(</span><span class="n">max_length</span><span class="o">=</span><span class="mi">255</span><span class="p">,</span> <span class="n">null</span><span class="o">=</span><span class="bp">True</span><span class="p">,</span> <span class="n">blank</span><span class="o">=</span><span class="bp">True</span><span class="p">)</span>
</code></pre></div></div>
<ul>
  <li><strong>Purpose</strong>: This field stores a textual value for the tracked metric, if applicable.</li>
  <li><strong>Details</strong>:
    <ul>
      <li>It is optional (<code class="language-plaintext highlighter-rouge">null=True, blank=True</code>) because not all metrics will have a textual value.</li>
      <li>Example: If <code class="language-plaintext highlighter-rouge">tracking="mood"</code>, <code class="language-plaintext highlighter-rouge">string_value</code> could be “happy” or “stressed”.</li>
    </ul>
  </li>
</ul>

<hr />

<h3 id="5-numerical_value">5. <strong><code class="language-plaintext highlighter-rouge">numerical_value</code></strong></h3>
<div class="language-python highlighter-rouge"><div class="highlight"><pre class="highlight"><code>   <span class="n">numerical_value</span> <span class="o">=</span> <span class="n">models</span><span class="p">.</span><span class="nc">DecimalField</span><span class="p">(</span><span class="n">max_digits</span><span class="o">=</span><span class="mi">10</span><span class="p">,</span> <span class="n">decimal_places</span><span class="o">=</span><span class="mi">2</span><span class="p">,</span> <span class="n">null</span><span class="o">=</span><span class="bp">True</span><span class="p">,</span> <span class="n">blank</span><span class="o">=</span><span class="bp">True</span><span class="p">)</span>
</code></pre></div></div>
<ul>
  <li><strong>Purpose</strong>: This field stores a numerical value for the tracked metric, if applicable.</li>
  <li><strong>Details</strong>:
    <ul>
      <li>It is optional (<code class="language-plaintext highlighter-rouge">null=True, blank=True</code>) because not all metrics will have a numerical value.</li>
      <li>Example: If <code class="language-plaintext highlighter-rouge">tracking="weight"</code>, <code class="language-plaintext highlighter-rouge">numerical_value</code> could be <code class="language-plaintext highlighter-rouge">70.5</code> (in kg).</li>
    </ul>
  </li>
</ul>

<hr />

<h3 id="6-notes">6. <strong><code class="language-plaintext highlighter-rouge">notes</code></strong></h3>
<div class="language-python highlighter-rouge"><div class="highlight"><pre class="highlight"><code>   <span class="n">notes</span> <span class="o">=</span> <span class="n">models</span><span class="p">.</span><span class="nc">TextField</span><span class="p">(</span><span class="n">null</span><span class="o">=</span><span class="bp">True</span><span class="p">,</span> <span class="n">blank</span><span class="o">=</span><span class="bp">True</span><span class="p">)</span>
</code></pre></div></div>
<ul>
  <li><strong>Purpose</strong>: This field allows users to add additional comments or details about the entry.</li>
  <li><strong>Details</strong>:
    <ul>
      <li>It is optional (<code class="language-plaintext highlighter-rouge">null=True, blank=True</code>).</li>
      <li>Example: If <code class="language-plaintext highlighter-rouge">tracking="workout"</code>, <code class="language-plaintext highlighter-rouge">notes</code> could describe the type of workout performed (e.g., “30 minutes of cardio and 20 minutes of strength training”).</li>
    </ul>
  </li>
</ul>

<hr />

<h3 id="7-tags">7. <strong><code class="language-plaintext highlighter-rouge">tags</code></strong></h3>
<div class="language-python highlighter-rouge"><div class="highlight"><pre class="highlight"><code>   <span class="n">tags</span> <span class="o">=</span> <span class="n">models</span><span class="p">.</span><span class="nc">CharField</span><span class="p">(</span><span class="n">max_length</span><span class="o">=</span><span class="mi">255</span><span class="p">,</span> <span class="n">null</span><span class="o">=</span><span class="bp">True</span><span class="p">,</span> <span class="n">blank</span><span class="o">=</span><span class="bp">True</span><span class="p">)</span>
</code></pre></div></div>
<ul>
  <li><strong>Purpose</strong>: This field allows users to add tags or keywords to categorize or filter entries.</li>
  <li><strong>Details</strong>:
    <ul>
      <li>It is optional (<code class="language-plaintext highlighter-rouge">null=True, blank=True</code>).</li>
      <li>Example: Tags like “morning”, “evening”, “high-intensity”, or “low-carb” can help organize entries.</li>
    </ul>
  </li>
</ul>

<hr />

<h3 id="8-source">8. <strong><code class="language-plaintext highlighter-rouge">source</code></strong></h3>
<div class="language-python highlighter-rouge"><div class="highlight"><pre class="highlight"><code>   <span class="n">source</span> <span class="o">=</span> <span class="n">models</span><span class="p">.</span><span class="nc">TextField</span><span class="p">(</span><span class="n">null</span><span class="o">=</span><span class="bp">True</span><span class="p">,</span> <span class="n">blank</span><span class="o">=</span><span class="bp">True</span><span class="p">,</span> <span class="n">default</span><span class="o">=</span><span class="sh">"</span><span class="s">fitcypher</span><span class="sh">"</span><span class="p">)</span>
</code></pre></div></div>
<ul>
  <li><strong>Purpose</strong>: This field indicates the source of the entry (e.g., a specific app, device, or manual entry).</li>
  <li><strong>Details</strong>:
    <ul>
      <li>It has a default value of <code class="language-plaintext highlighter-rouge">"fitcypher"</code>, which could be your app’s name.</li>
      <li>Example: If the data is synced from a fitness tracker like Fitbit, <code class="language-plaintext highlighter-rouge">source</code> could be <code class="language-plaintext highlighter-rouge">"Fitbit"</code>.</li>
    </ul>
  </li>
</ul>

<hr />

<h3 id="9-__str__-method">9. <strong><code class="language-plaintext highlighter-rouge">__str__</code> Method</strong></h3>
<div class="language-python highlighter-rouge"><div class="highlight"><pre class="highlight"><code>   <span class="k">def</span> <span class="nf">__str__</span><span class="p">(</span><span class="n">self</span><span class="p">):</span>
       <span class="k">return</span> <span class="sa">f</span><span class="sh">"</span><span class="si">{</span><span class="n">self</span><span class="p">.</span><span class="n">date</span><span class="p">.</span><span class="nf">strftime</span><span class="p">(</span><span class="sh">'</span><span class="s">%Y-%m-%d</span><span class="sh">'</span><span class="p">)</span><span class="si">}</span><span class="s">, </span><span class="si">{</span><span class="n">self</span><span class="p">.</span><span class="n">user</span><span class="si">}</span><span class="s">, </span><span class="si">{</span><span class="n">self</span><span class="p">.</span><span class="n">string_value</span><span class="si">}</span><span class="sh">"</span>
</code></pre></div></div>
<ul>
  <li><strong>Purpose</strong>: This method provides a human-readable string representation of the <code class="language-plaintext highlighter-rouge">Entry</code> object.</li>
  <li><strong>Details</strong>:
    <ul>
      <li>It is useful for debugging, logging, or displaying the entry in the Django admin interface.</li>
      <li>Example output: <code class="language-plaintext highlighter-rouge">"2023-10-15, john_doe, 70.5"</code>.</li>
    </ul>
  </li>
</ul>

<hr />

<h3 id="summary-of-use-cases">Summary of Use Cases</h3>
<ul>
  <li><strong>Tracking Weight</strong>: <code class="language-plaintext highlighter-rouge">tracking="weight"</code>, <code class="language-plaintext highlighter-rouge">numerical_value=70.5</code>, <code class="language-plaintext highlighter-rouge">notes="After breakfast"</code>, <code class="language-plaintext highlighter-rouge">tags="morning"</code>.</li>
  <li><strong>Tracking Mood</strong>: <code class="language-plaintext highlighter-rouge">tracking="mood"</code>, <code class="language-plaintext highlighter-rouge">string_value="happy"</code>, <code class="language-plaintext highlighter-rouge">notes="Had a great workout"</code>.</li>
  <li><strong>Tracking Steps</strong>: <code class="language-plaintext highlighter-rouge">tracking="steps"</code>, <code class="language-plaintext highlighter-rouge">numerical_value=10000</code>, <code class="language-plaintext highlighter-rouge">source="Fitbit"</code>.</li>
</ul>

<p>This model is highly flexible and can accommodate a wide range of health and fitness metrics, making it a great foundation for a simple health and fitness tracker.</p>

<p>We will use Django Rest Framework as the API framework to interact with this model.</p>

<p>To make the API friendly to use we’ll provide an API UI :</p>

<p><img src="/assets/images/fitcypher/20250202/fitcypher-entries-api.png" alt="alt text" /></p>]]></content><author><name>Alex Laverty</name><email>your-email@domain.com</email></author><category term="fitcypher" /><summary type="html"><![CDATA[Today I am working on the FitCypher database backend, to keep it simple the nutrition and health metrics will be posted into a common Entry model :]]></summary><media:thumbnail xmlns:media="http://search.yahoo.com/mrss/" url="http://localhost:4000/assets/images/fitcypher/20250201/django-fitcypher.jpg" /><media:content medium="image" url="http://localhost:4000/assets/images/fitcypher/20250201/django-fitcypher.jpg" xmlns:media="http://search.yahoo.com/mrss/" /></entry><entry><title type="html">REST API</title><link href="http://localhost:4000/fitcypher/rest-api/" rel="alternate" type="text/html" title="REST API" /><published>2025-02-02T12:34:00+11:00</published><updated>2025-02-02T12:34:00+11:00</updated><id>http://localhost:4000/fitcypher/rest-api</id><content type="html" xml:base="http://localhost:4000/fitcypher/rest-api/"><![CDATA[<p>We will use Django Rest Framework as the API framework to interact with this model.</p>

<p>Using API’s allows to either add entries in bulk, allow users to export and import from other systems, allow for automation and scheduled data syncing.</p>

<p>To make the API friendly to use we’ll provide an API UI :</p>

<p><img src="/assets/images/fitcypher/20250202/fitcypher-entries-api.png" alt="alt text" /></p>

<h2 id="rest-api-authentication">Rest API Authentication</h2>

<p>For now we will just use basic authentication, username and password, however in the future we’ll implement some better authentication methods like token authentication.</p>

<h2 id="fitcypher-api-curl-commands">FitCypher API Curl Commands</h2>

<h3 id="get">GET</h3>

<p>Curl Command :</p>

<div class="language-plaintext highlighter-rouge"><div class="highlight"><pre class="highlight"><code>curl - X GET http: //127.0.0.1:8000/api/entries/ -u your_username:your_password
</code></pre></div></div>

<p>JSON Response :</p>

<div class="language-plaintext highlighter-rouge"><div class="highlight"><pre class="highlight"><code>    [{
        "id": 1,
        "user": {
            "id": 1,
            "username": "alex"
        },
        "date": "2025-02-02T07:51:00Z",
        "tracking": "Food",
        "string_value": "Apple",
        "numerical_value": null,
        "notes": "",
        "tags": "",
        "source": "FitCypher"
    }, {
        "id": 2,
        "user": {
            "id": 1,
            "username": "alex"
        },
        "date": "2025-02-02T07:52:00Z",
        "tracking": "Exercise",
        "string_value": "Push Ups",
        "numerical_value": "10.00",
        "notes": "",
        "tags": "",
        "source": "FitCypher"
    }]
</code></pre></div></div>

<p>If you install JQ you can also get pretty printed output via :</p>

<div class="language-plaintext highlighter-rouge"><div class="highlight"><pre class="highlight"><code>curl -s -X GET http://127.0.0.1:8000/api/entries/ -u your_username:your_password | jq
[
  {
    "id": 1,
    "user": {
      "id": 1,
      "username": "alex"
    },
    "date": "2025-02-02T07:51:00Z",
    "tracking": "Food",
    "string_value": "Apple",
    "numerical_value": null,
    "notes": "",
    "tags": "",
    "source": "FitCypher"
  },
  {
    "id": 2,
    "user": {
      "id": 1,
      "username": "alex"
    },
    "date": "2025-02-02T07:52:00Z",
    "tracking": "Exercise",
    "string_value": "Push Ups",
    "numerical_value": "10.00",
    "notes": "",
    "tags": "",
    "source": "FitCypher"
  },
  {
    "id": 3,
    "user": {
      "id": 1,
      "username": "alex"
    },
    "date": "2023-10-15T12:00:00Z",
    "tracking": "weight",
    "string_value": null,
    "numerical_value": "70.50",
    "notes": "After breakfast",
    "tags": "morning",
    "source": "fitcypher"
  }
]
</code></pre></div></div>

<h3 id="post">POST</h3>

<p>Add a new entry via the API</p>

<div class="language-plaintext highlighter-rouge"><div class="highlight"><pre class="highlight"><code>curl -X POST http://127.0.0.1:8000/api/entries/ \
-H "Content-Type: application/json" \
-u your_username:your_password \
-d '{
    "date": "2023-10-15T12:00:00Z",
    "tracking": "weight",
    "numerical_value": 70.5,
    "notes": "After breakfast",
    "tags": "morning",
    "source": "fitcypher"
}'
</code></pre></div></div>

<p>Add a new entry via the API to the PythonAnywhere hosted instance :</p>

<div class="language-plaintext highlighter-rouge"><div class="highlight"><pre class="highlight"><code>curl -X POST https://alexlaverty.pythonanywhere.com/api/entries/ \
-H "Content-Type: application/json" \
-u your_username:your_password \
-d '{
    "date": "2023-10-15T12:00:00Z",
    "tracking": "food",
    "string_value": "Banana",
    "numerical_value": "",
    "notes": "",
    "tags": "",
    "source": "fitcypher"
}'
</code></pre></div></div>]]></content><author><name>Alex Laverty</name><email>your-email@domain.com</email></author><category term="fitcypher" /><summary type="html"><![CDATA[We will use Django Rest Framework as the API framework to interact with this model.]]></summary><media:thumbnail xmlns:media="http://search.yahoo.com/mrss/" url="http://localhost:4000/assets/images/fitcypher/20250202/django-rest-framework.jpg" /><media:content medium="image" url="http://localhost:4000/assets/images/fitcypher/20250202/django-rest-framework.jpg" xmlns:media="http://search.yahoo.com/mrss/" /></entry><entry><title type="html">Generating FitCypher web logos with AI</title><link href="http://localhost:4000/fitcypher/generating-web-logos-with-ai/" rel="alternate" type="text/html" title="Generating FitCypher web logos with AI" /><published>2025-02-01T18:34:00+11:00</published><updated>2025-02-01T18:34:00+11:00</updated><id>http://localhost:4000/fitcypher/generating-web-logos-with-ai</id><content type="html" xml:base="http://localhost:4000/fitcypher/generating-web-logos-with-ai/"><![CDATA[<style>
.image-gallery {
    display: flex;
    flex-wrap: wrap;
    gap: 10px; /* Set the gap between images */
    justify-content: flex-start; /* Align items to the left */
    margin-bottom: 10px;
}

.image-gallery img {
    width: 200px; /* Adjust the width of the images */
    height: auto; /* Maintain aspect ratio */
}
</style>

<p>I need a logo for the FitCypher app and I am a hopeless artist so I’m using <a href="https://www.meta.ai/">Meta AI</a> image generation to come up with a logo, here’s a few I’ve generated</p>

<div class="image-gallery">
    <img src="/assets/images/fitcypher/20250201/fitcypher-logo-001.jpeg" alt="Logo 1" />
    <img src="/assets/images/fitcypher/20250201/fitcypher-logo-002.jpeg" alt="Logo 2" />
    <img src="/assets/images/fitcypher/20250201/fitcypher-logo-003.jpeg" alt="Logo 3" />
    <img src="/assets/images/fitcypher/20250201/fitcypher-logo-004.jpeg" alt="Logo 4" />
</div>

<p>So far this is the one I’ve chosen to go with but I am open to suggestions :</p>

<div class="image-gallery">
    <img src="/assets/images/fitcypher/fitcypher-logo.jpg" alt="Logo 1" />
</div>]]></content><author><name>Alex Laverty</name><email>your-email@domain.com</email></author><category term="fitcypher" /><summary type="html"><![CDATA[]]></summary><media:thumbnail xmlns:media="http://search.yahoo.com/mrss/" url="http://localhost:4000/assets/images/fitcypher/fitcypher-logo.jpg" /><media:content medium="image" url="http://localhost:4000/assets/images/fitcypher/fitcypher-logo.jpg" xmlns:media="http://search.yahoo.com/mrss/" /></entry><entry><title type="html">New Django Project</title><link href="http://localhost:4000/fitcypher/new-django-project-copy/" rel="alternate" type="text/html" title="New Django Project" /><published>2025-02-01T17:34:00+11:00</published><updated>2025-02-01T17:34:00+11:00</updated><id>http://localhost:4000/fitcypher/new-django-project%20copy</id><content type="html" xml:base="http://localhost:4000/fitcypher/new-django-project-copy/"><![CDATA[<h2 id="creating-a-new-django-project">Creating a new Django Project</h2>

<p>Creating the FitCypher Django Project</p>

<p>I switch between linux and windows desktops so the commands will be whatever OS I’m on at the time.</p>

<p>Creating a new python virtual environment and activating it</p>

<div class="language-plaintext highlighter-rouge"><div class="highlight"><pre class="highlight"><code>D:\src\fitcypher&gt;virtualenv env
D:\src\fitcypher&gt;env\Scripts\activate.bat
</code></pre></div></div>

<div class="language-python highlighter-rouge"><div class="highlight"><pre class="highlight"><code><span class="c1"># Install Django
</span><span class="n">pip</span> <span class="n">install</span> <span class="n">django</span>

<span class="c1"># Create a new project
</span><span class="n">django</span><span class="o">-</span><span class="n">admin</span> <span class="n">startproject</span> <span class="n">fitcypher</span>

<span class="c1"># Navigate to the project directory
</span><span class="n">cd</span> <span class="n">fitcypher</span>

<span class="c1"># Create a new app
</span><span class="n">python</span> <span class="n">manage</span><span class="p">.</span><span class="n">py</span> <span class="n">startapp</span> <span class="n">api</span>

<span class="c1"># Add the 'api' to INSTALLED_APPS in settings.py
</span>
<span class="n">INSTALLED_APPS</span> <span class="o">=</span> <span class="p">[</span>
    <span class="sh">'</span><span class="s">django.contrib.admin</span><span class="sh">'</span><span class="p">,</span>
    <span class="sh">'</span><span class="s">django.contrib.auth</span><span class="sh">'</span><span class="p">,</span>
    <span class="sh">'</span><span class="s">django.contrib.contenttypes</span><span class="sh">'</span><span class="p">,</span>
    <span class="sh">'</span><span class="s">django.contrib.sessions</span><span class="sh">'</span><span class="p">,</span>
    <span class="sh">'</span><span class="s">django.contrib.messages</span><span class="sh">'</span><span class="p">,</span>
    <span class="sh">'</span><span class="s">django.contrib.staticfiles</span><span class="sh">'</span><span class="p">,</span>
    <span class="sh">'</span><span class="s">api</span><span class="sh">'</span>
<span class="p">]</span>

<span class="c1"># Run initial migrations
</span><span class="n">python</span> <span class="n">manage</span><span class="p">.</span><span class="n">py</span> <span class="n">migrate</span>

<span class="c1"># Start the development server
</span><span class="n">python</span> <span class="n">manage</span><span class="p">.</span><span class="n">py</span> <span class="n">runserver</span>
</code></pre></div></div>

<p>After that browse the local website :</p>

<p><a href="http://127.0.0.1:8000/">http://127.0.0.1:8000/</a></p>

<p>and then hey presto we have lift off :</p>

<p><img src="/assets/images/fitcypher/20250201/001.png" alt="alt text" /></p>

<h2 id="deploying-fitcypher-to-rendercom">Deploying FitCypher to Render.com</h2>

<p>Once you’ve built the site and pushed the code to github you need somewhere to deploy and host the website.</p>

<p>I’ve used <a href="https://render.com">Render.com</a> before and it will monitor the github repo, and if there is a new commit it will redeploy the website with the latest code.</p>

<p>I’ve deployed before via docker container but I’ll give it a go trying to run the django website directly on render, we’ll see how it goes.</p>

<p>Going to follow the documentation here <a href="https://render.com/docs/deploy-django">https://render.com/docs/deploy-django</a></p>

<div class="language-plaintext highlighter-rouge"><div class="highlight"><pre class="highlight"><code>pip install psycopg2-binary
pip install dj-database-url
</code></pre></div></div>

<p>On second thought I’m going to try out <a href="https://www.pythonanywhere.com/">PythonAnywhere</a></p>

<p>When I tried Render free tier, first things I noticed were the website goes to sleep if it’s not receiving traffic and when it’s accessed the next time the website has to wake up which takes time and can even time out on the first attempt. Also the database is scheduled deletion every month which means having to setup the database again. It was pretty annoying.</p>

<p>Seems PythonAnywhere will not go to sleep and as long as you log in and click a button saying you’re still using the website it’ll extend for another 3 months, not sure what the go is with the database for free tier.</p>

<p>Hmmm so Render.com has a much nicer setup, you can pretty much auth to Github and click a repo and it’ll do a webhook on commit to trigger and deployment, where as PythonAnywhere is much more basic, and you basically get a virtual server and ssh console access to login, and you need to git clone your repo, manually git pull and then go into the UI and click reload to make the changes take effect, might have to look into more if there’s better ways of triggering deployment on git commit.</p>

<p>So the basic FitCypher django project is available here :</p>

<p><a href="https://alexlaverty.pythonanywhere.com/">https://alexlaverty.pythonanywhere.com/</a></p>

<p>I also provisioned a MySQL database on PythonAnywhere, it also had PostGres DB but they required a premium account so I’ve gone with MySQL.</p>]]></content><author><name>Alex Laverty</name><email>your-email@domain.com</email></author><category term="fitcypher" /><summary type="html"><![CDATA[Creating a new Django Project]]></summary><media:thumbnail xmlns:media="http://search.yahoo.com/mrss/" url="http://localhost:4000/assets/images/fitcypher/20250201/django-fitcypher.jpg" /><media:content medium="image" url="http://localhost:4000/assets/images/fitcypher/20250201/django-fitcypher.jpg" xmlns:media="http://search.yahoo.com/mrss/" /></entry><entry><title type="html">FitCypher - Fitness and Health Tracker</title><link href="http://localhost:4000/fitcypher/fitcypher/" rel="alternate" type="text/html" title="FitCypher - Fitness and Health Tracker" /><published>2025-02-01T16:34:00+11:00</published><updated>2025-02-01T16:34:00+11:00</updated><id>http://localhost:4000/fitcypher/fitcypher</id><content type="html" xml:base="http://localhost:4000/fitcypher/fitcypher/"><![CDATA[<p>I’m going to build a fitness and nutrition tracker using Django and document along the way.</p>

<p>The app is going to be called FitCypher and the code will be stored in following github repository :</p>

<p><a href="https://github.com/alexlaverty/fitcypher">https://github.com/alexlaverty/fitcypher</a></p>

<p>FitCypher will be hosted on PythonAnywhere free tier for the time being :</p>

<p><a href="https://alexlaverty.pythonanywhere.com/">https://alexlaverty.pythonanywhere.com/</a></p>]]></content><author><name>Alex Laverty</name><email>your-email@domain.com</email></author><category term="fitcypher" /><summary type="html"><![CDATA[I’m going to build a fitness and nutrition tracker using Django and document along the way.]]></summary><media:thumbnail xmlns:media="http://search.yahoo.com/mrss/" url="http://localhost:4000/assets/images/fitcypher/fitcypher.jpg" /><media:content medium="image" url="http://localhost:4000/assets/images/fitcypher/fitcypher.jpg" xmlns:media="http://search.yahoo.com/mrss/" /></entry></feed>